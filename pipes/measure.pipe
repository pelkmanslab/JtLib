# JTERATOR PIPELINE DESCRIPTOR FILE
# =================================
# 
# The working directory is by default the directory where the .pipe file 
# is located. You can provide absolute or relative paths in your pipeline 
# description.
#
# To run this pipeline in iterative mode, do:
#   $ jt run
#
# To run this pipeline for individual jobs (parallel mode), do:
#   $ jt joblist
#   $ jt run --job [n]
# Note: If you change the pipeline, do not forget to call 'jt joblist' again!
#
# To run individual modules (e.g. for debugging), do:
#   $ cat [handles_filename] | [executable] [module_filename]


# Define your project:
project:

  name: test
  libpath: ~/jtlib


# Define the items ("jobs") you want to process:
# Note: Jterator writes the corresponding filenames
# into the temporary pipeline HDF5 file, so that they will
# can be retrieved by modules.
jobs:

    folder: TIFF
    pattern: 
      - name: Dapi
        expression: .*C01\.png
      - name: Red
        expression: .*C02\.png


# Define the path to modules (executable files) and handles (YAML files)
# and the interpreter program (full path or command for /usr/bin/env):
pipeline:

  - name: LoadDapi
    module: "{libpath}/modules/LoadImage.py"
    handles: handles/LoadDapi.handles
    interpreter: python

  - name: IllumCorrDapi
    module: "{libpath}/modules/IllumCorr.py"
    handles: handles/IllumCorrDapi.handles
    interpreter: python

  - name: AlignDapi
    module: "{libpath}/modules/AlignImage.py"
    handles: handles/AlignDapi.handles
    interpreter: python

  - name: LoadRed
    module: "{libpath}/modules/LoadImage.py"
    handles: handles/LoadRed.handles
    interpreter: python

  - name: IllumCorrRed
    module: "{libpath}/modules/IllumCorr.py"
    handles: handles/IllumCorrRed.handles
    interpreter: python

  - name: AlignRed
    module: "{libpath}/modules/AlignImage.py"
    handles: handles/AlignRed.handles
    interpreter: python

  - name: LoadSegmentation
    module: "{libpath}/modules/LoadSegmentation.py"
    handles: handles/LoadSegmentation.handles
    interpreter: python

  - name: AlignSegmentation
    module: "{libpath}/modules/AlignSegmentation.py"
    handles: handles/AlignSegmentation.handles
    interpreter: python

  - name: MeasureNuclei
    module: "{libpath}/modules/MeasureNuclei.py"
    handles: handles/MeasureNuclei.handles
    interpreter: python

  - name: MeasureCells
    module: "{libpath}/modules/MeasureObjects.py"
    handles: handles/MeasureCells.handles
    interpreter: python
